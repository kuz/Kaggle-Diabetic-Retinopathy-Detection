name: "CaffeNet"
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: false
    mean_file: "/storage/hpc_anna/Kaggle_DRD/caffeinput/THIS_SHOUD_BE_IGNORED.binaryproto"
  }
  data_param {
    source: "/storage/hpc_anna/Kaggle_DRD/caffeinput/THIS_SHOULD_BE_IGNORED"
    batch_size: 10
    backend: LMDB
  }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mirror: false
    mean_file: "/storage/hpc_anna/Kaggle_DRD/caffeinput/size256/drdnet_mean_test.binaryproto"
  }
  data_param {
    source: "/storage/hpc_anna/Kaggle_DRD/caffeinput/size256/ilsvrc12_test_lmdb"
    batch_size: 1
    backend: LMDB
  }
}

# Convolutional layer for small blobs
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 12
    kernel_size: 4
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 5
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
# Hidden layer for the first convolutional layer
layer {
  name: "conv1_ip"
  type: "InnerProduct"
  bottom: "norm1"
  top: "conv1_ip"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv1_ip"
  top: "conv1_ip"
}
# Convolutional layer for blood vesels
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "data"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 90
    kernel_size: 31
    stride: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 4
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
# Hidden layer for the second convolutional layer
layer {
  name: "conv2_ip"
  type: "InnerProduct"
  bottom: "norm2"
  top: "conv2_ip"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv2_ip"
  top: "conv2_ip"
}

# Convolutional layer for wool spots
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "data"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 39
    kernel_size: 14
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 6
    stride: 2
  }
}
layer {
  name: "norm3"
  type: "LRN"
  bottom: "pool3"
  top: "norm3"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}

# Hidden layer for the third convolutional layer
layer {
  name: "conv3_ip"
  type: "InnerProduct"
  bottom: "norm3"
  top: "conv3_ip"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "conv3_ip"
  top: "conv3_ip"
}

# Convolutional layer for large artifacts
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "data"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 24
    kernel_size: 76
    stride: 10
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm4"
  type: "LRN"
  bottom: "pool4"
  top: "norm4"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}

# Hidden layer for the fourth convolutional layer
layer {
  name: "conv4_ip"
  type: "InnerProduct"
  bottom: "norm4"
  top: "conv4_ip"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu8"
  type: "ReLU"
  bottom: "conv4_ip"
  top: "conv4_ip"
}

# Concatenating feature extraction layers
layer {
  name: "concat"
  type: "Concat"
  bottom: "conv1_ip"
  bottom: "conv2_ip"
  bottom: "conv3_ip"
  bottom: "conv4_ip"
  top: "out"
  concat_param {
    concat_dim: 1
  }
}

# First hidden layer
layer {
  name: "fc1"
  type: "InnerProduct"
  bottom: "out"
  top: "fc1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 5000
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu9"
  type: "ReLU"
  bottom: "fc1"
  top: "fc1"
}

# Second hidden layer
layer {
  name: "fc2"
  type: "InnerProduct"
  bottom: "fc1"
  top: "fc2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1000
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu10"
  type: "ReLU"
  bottom: "fc2"
  top: "fc2"
}

# Third hidden layer
layer {
  name: "fc3"
  type: "InnerProduct"
  bottom: "fc2"
  top: "fc3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu11"
  type: "ReLU"
  bottom: "fc3"
  top: "fc3"
}

layer {
  name: "accuracy_TEST"
  type: "Accuracy"
  bottom: "fc3"
  bottom: "label"
  top: "accuracy_TEST"
  include {
    phase: TEST
  }
}
layer {
  name: "accuracy_TRAIN"
  type: "Accuracy"
  bottom: "fc3"
  bottom: "label"
  top: "accuracy_TRAIN"
  include {
    phase: TRAIN
  }
}
layer {
  name: "prob"
  type: "Softmax"
  bottom: "fc3"
  top: "prob"
}

